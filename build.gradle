plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.peeerr'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
	asciidocVersion = "3.0.1"
	snippetsDir = file('build/generated-snippets')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.657'
	implementation 'org.apache.tika:tika-core:2.9.1'
	implementation 'com.h2database:h2'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation group: 'com.h2database', name: 'h2', version: '2.2.220'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Spring Rest Docs
	asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor:${asciidocVersion}"
	testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${asciidocVersion}"

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.session:spring-session-data-redis'
}

// test 할 때 snippetsDir 에 생성된 응답을 asciidoctor 로 변환하여 .adoc 파일 생성
tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'  // 테스트 끝나고 jacocoTestReport 실행
}

tasks.named('asciidoctor') {
	configurations 'asciidoctorExt'
	inputs.dir snippetsDir
	dependsOn test
}

// asciidoctor 실행시 생성된 html 파일을 src/main/resources/static/docs 디렉토리에 카피
task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("${asciidoctor.outputDir}")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

bootJar {
	dependsOn copyDocument
	from ("${asciidoctor.outputDir}") {  // bootJar 에 asciidoctor task 에서 생성된 html 파일 추가
		into 'static/docs'     // bootJar 에 추가될 경로
	}
}

// QueryDSL
def querydslSrcDir = 'src/main/generated'
clean {
	delete file(querydslSrcDir)
}

// src/main/generated 에 QClass 생성
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

// JaCoCo
jacocoTestReport {
	// 제외 패키지 설정
	getClassDirectories().setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'**/config',
						'**/security/filter',
						'**/security/handler',
						'**/dto',
						'**/exception',
						'**/entity',
						'**/constant'
				])
			})
	)

	reports {
		// 리포트 저장 경로 설정
		html.outputLocation = file("${layout.buildDirectory.get()}/jacoco/report.html")
	}

	// jacocoTestReport 끝나면 jacocoTestCoverageVerification 실행
	finalizedBy 'jacocoTestCoverageVerification'
}

// 커버리지 검증 설정
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
		}
	}
}

// 배포 시 jar 파일 하나만 생성
jar {
	enabled = false
}
